// Generated by gencpp from file navigation/GetPixelPoseResponse.msg
// DO NOT EDIT!


#ifndef NAVIGATION_MESSAGE_GETPIXELPOSERESPONSE_H
#define NAVIGATION_MESSAGE_GETPIXELPOSERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace navigation
{
template <class ContainerAllocator>
struct GetPixelPoseResponse_
{
  typedef GetPixelPoseResponse_<ContainerAllocator> Type;

  GetPixelPoseResponse_()
    : pixel_pose()  {
    }
  GetPixelPoseResponse_(const ContainerAllocator& _alloc)
    : pixel_pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pixel_pose_type;
  _pixel_pose_type pixel_pose;





  typedef boost::shared_ptr< ::navigation::GetPixelPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation::GetPixelPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPixelPoseResponse_

typedef ::navigation::GetPixelPoseResponse_<std::allocator<void> > GetPixelPoseResponse;

typedef boost::shared_ptr< ::navigation::GetPixelPoseResponse > GetPixelPoseResponsePtr;
typedef boost::shared_ptr< ::navigation::GetPixelPoseResponse const> GetPixelPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation::GetPixelPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation::GetPixelPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navigation::GetPixelPoseResponse_<ContainerAllocator1> & lhs, const ::navigation::GetPixelPoseResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pixel_pose == rhs.pixel_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navigation::GetPixelPoseResponse_<ContainerAllocator1> & lhs, const ::navigation::GetPixelPoseResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::navigation::GetPixelPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation::GetPixelPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation::GetPixelPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation::GetPixelPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::GetPixelPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::GetPixelPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation::GetPixelPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c5941ad5d679949278959effa1051da";
  }

  static const char* value(const ::navigation::GetPixelPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c5941ad5d679949ULL;
  static const uint64_t static_value2 = 0x278959effa1051daULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation::GetPixelPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation/GetPixelPoseResponse";
  }

  static const char* value(const ::navigation::GetPixelPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation::GetPixelPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Response\n"
"geometry_msgs/Point pixel_pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::navigation::GetPixelPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation::GetPixelPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pixel_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPixelPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation::GetPixelPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation::GetPixelPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "pixel_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pixel_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION_MESSAGE_GETPIXELPOSERESPONSE_H
